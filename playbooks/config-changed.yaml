---
- include: installation-status.yaml

- name: Set Status to configuring
  shell: "status-set maintenance 'Configuring' "

- name: enforce latest docker
  when: latest == true and latest_installed == "False"
  include: latest-docker.yaml

- name: enforce universe docker
  when: latest == false and universe_installed == "False"
  include: universe-docker.yaml

- set_fact:
    service_label: "service={{ service_name }}"
    unit_label: "unit={{ local_unit }}"

- name: Set Status to configuring
  shell: "status-set maintenance 'Configuring UFS storage' "
  when: aufs == true

- name: grab release info
  shell: uname -r
  register: rel
  when: aufs == true

- set_fact:
    thisrel: "{{ rel.stdout }}"
  when: aufs == true

- name: Install AUFS backend supporting packages
  apt: name={{item}} state=present
  with_items:
      - "linux-image-extra-{{thisrel}}"
      - aufs-tools
  when: aufs == true

- name: stop docker to remove device mapper
  service: "name={{docker_version_name}} state=stopped"
  when: aufs == true

- name: Remove Devicemapper backend if present
  file: path=/var/lib/docker/devicemapper state=absent
  when: aufs == true

- name: Register AUFS option
  docker_opts: action=add
               key="storage-driver" val="aufs"
               yaml="{{ opts_yaml }}"
  when: aufs == true

- name: Set Status to configuring
  shell: "status-set maintenance 'Configuring labels' "
  when: aufs == true

- name: set service name as a label
  docker_opts: action=add
               key=label val="{{ service_label }}"
               yaml="{{ opts_yaml }}"
  notify:
    - calculate docker opts
    - render docker defaults

- name: set unit as a label
  docker_opts: action=add
               key=label val="{{ unit_label }}"
               yaml="{{ opts_yaml }}"
  notify:
    - calculate docker opts
    - render docker defaults
    - restart docker

- name: Install docker compose
  include: install-compose.yaml
  when: compose == true
